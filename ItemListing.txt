Features:

1. Item Management:
   - Creating a Contract: Utilize Solidity to create a contract that manages the listing of items.
   - Types and Variables: Define various types such as Boolean, Address, Integers, String, and Bytes to represent item attributes.
   - Structs: Use structs to define an item with attributes like name, description, price, and quantity.
   - Mappings: Implement mappings to manage the relationship between sellers and their listed items.

Update Details:

This Solidity code defines a smart contract called `ItemListing` that allows users to list and retrieve details of items for sale. Here's a breakdown of the code:

1. `pragma solidity 0.8.17;`: This line specifies the Solidity version that the contract should be compiled with.

2. `struct Item { ... }`: Defines a custom data structure `Item` that represents an item for
sale. It includes fields for the item's name, description, price, and quantity.

3. `mapping(address => Item[]) private sellerItems;`: Declares a private mapping named `sellerItems` that associates
each seller's address with an array of `Item` struct instances. This mapping stores the relationship between
sellers and the items they have listed for sale.

4. `function createItem(...){}`: Defines a function `createItem` that allows a seller to create a new item listing by providing 
the item's name, description, price, and quantity. It creates a new `Item` struct instance using the provided
parameters and adds it to the seller's list of items.

5. `function getSellerItemCount(...){}`: Defines a function `getSellerItemCount` that returns the total number of items listed
by a specific seller. It takes the seller's address as input and retrieves the length of the array of items 
associated with that seller from the `sellerItems` mapping.

6. `function getItemDetails(...){}`: Defines a function `getItemDetails` that allows a user to retrieve the details
of a specific item listed by a seller. It takes the seller's address and the item ID as inputs, checks if the item
ID is valid, and then returns the name, description, price, and quantity of the item.

In summary, this smart contract enables sellers to list items for sale, retrieve the total count of
items they have listed, and get details of specific items they have listed. It uses a mapping to store the
relationship between sellers and their listed items.
